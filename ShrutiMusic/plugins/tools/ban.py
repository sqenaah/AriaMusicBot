utf-8utf-8





















importasyncio
fromcontextlibimportsuppress

frompyrogramimportfilters
frompyrogram.enumsimportChatMembersFilter,ChatMemberStatus,ChatType
frompyrogram.typesimport(
CallbackQuery,
ChatPermissions,
ChatPrivileges,
Message,
InlineKeyboardButton,
InlineKeyboardMarkup,
)
fromstringimportascii_lowercase
fromtypingimportDict,Union

fromShrutiMusicimportapp
fromShrutiMusic.miscimportSUDOERS
fromShrutiMusic.core.mongoimportmongodb
fromShrutiMusic.utils.errorimportcapture_err
fromShrutiMusic.utils.keyboardimportikb
fromShrutiMusic.utils.databaseimportsave_filter
fromShrutiMusic.utils.functionsimport(
extract_user,
extract_user_and_reason,
time_converter,
)
fromShrutiMusic.utils.permissionsimportadminsOnly,member_permissions
fromconfigimportBANNED_USERS

warnsdb=mongodb.warns

__MODULE__="B·¥Ä…¥"
__HELP__="""
/ban - Ban A User
/banall - Ban All Users
/sban - Delete all messages of user that sended in group and ban the user
/tban - Ban A User For Specific Time
/unban - Unban A User
/warn - Warn A User
/swarn - Delete all the message sended in group and warn the user
/rmwarns - Remove All Warning of A User
/warns - Show Warning Of A User
/kick - Kick A User
/skick - Delete the replied message kicking its sender
/purge - Purge Messages
/purge [n] - Purge "n" number of messages from replied message
/del - Delete Replied Message
/promote - Promote A Member
/fullpromote - Promote A Member With All Rights
/demote - Demote A Member
/pin - Pin A Message
/unpin - unpin a message
/unpinall - unpinall messages
/mute - Mute A User
/tmute - Mute A User For Specific Time
/unmute - Unmute A User
/zombies - Ban Deleted Accounts
/report | @admins | @admin - Report A Message To Admins."""


asyncdefint_to_alpha(user_id:int)->str:
    alphabet=list(ascii_lowercase)[:10]
text=""
user_id=str(user_id)
foriinuser_id:
        text+=alphabet[int(i)]
returntext


asyncdefget_warns_count()->dict:
    chats_count=0
warns_count=0
asyncforchatinwarnsdb.find({"chat_id":{"$lt":0}}):
        foruserinchat["warns"]:
            warns_count+=chat["warns"][user]["warns"]
chats_count+=1
return{"chats_count":chats_count,"warns_count":warns_count}


asyncdefget_warns(chat_id:int)->Dict[str,int]:
    warns=awaitwarnsdb.find_one({"chat_id":chat_id})
ifnotwarns:
        return{}
returnwarns["warns"]


asyncdefget_warn(chat_id:int,name:str)->Union[bool,dict]:
    name=name.lower().strip()
warns=awaitget_warns(chat_id)
ifnameinwarns:
        returnwarns[name]


asyncdefadd_warn(chat_id:int,name:str,warn:dict):
    name=name.lower().strip()
warns=awaitget_warns(chat_id)
warns[name]=warn

awaitwarnsdb.update_one(
{"chat_id":chat_id},{"$set":{"warns":warns}},upsert=True
)


asyncdefremove_warns(chat_id:int,name:str)->bool:
    warnsd=awaitget_warns(chat_id)
name=name.lower().strip()
ifnameinwarnsd:
        delwarnsd[name]
awaitwarnsdb.update_one(
{"chat_id":chat_id},
{"$set":{"warns":warnsd}},
upsert=True,
)
returnTrue
returnFalse


@app.on_message(filters.command(["kick","skick"])&~filters.private&~BANNED_USERS)
@adminsOnly("can_restrict_members")
asyncdefkickFunc(_,message:Message):
    user_id,reason=awaitextract_user_and_reason(message)
ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä")
ifuser_id==app.id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ã…™·¥Ñ·¥ã ·¥ç ès·¥á ü“ì, …™ ·¥Ñ·¥Ä…¥  ü·¥á·¥Ä·¥†·¥á …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ.")
ifuser_idinSUDOERS:
        returnawaitmessage.reply_text(" è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥ã…™·¥Ñ·¥ã ·¥õ ú·¥á ·¥á ü·¥á·¥†·¥Ä·¥õ·¥á·¥Ö ·¥è…¥·¥á ?")
ifuser_idin[
member.user.id
asyncformemberinapp.get_chat_members(
chat_id=message.chat.id,filter=ChatMembersFilter.ADMINISTRATORS
)
]:
        returnawaitmessage.reply_text(
"…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ã…™·¥Ñ·¥ã ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥,  è·¥è·¥ú ·¥ã…¥·¥è·¥° ·¥õ ú·¥á  Ä·¥ú ü·¥ás,  è·¥è·¥ú ·¥ã…¥·¥è·¥° ·¥õ ú·¥á  Ä·¥ú ü·¥ás, s·¥è ·¥Ö·¥è …™ "
)
mention=(awaitapp.get_users(user_id)).mention
msg=f"""
**·¥ã…™·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Ä:** {mention}
**·¥ã…™·¥Ñ·¥ã·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else '·¥Ä…¥·¥è…¥·¥ç·¥è·¥ús'}
** Ä·¥á·¥Äs·¥è…¥:** {reason or '…¥·¥è  Ä·¥á·¥Äs·¥è…¥ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö'}"""
awaitmessage.chat.ban_member(user_id)
replied_message=message.reply_to_message
ifreplied_message:
        message=replied_message
awaitmessage.reply_text(msg)
awaitasyncio.sleep(1)
awaitmessage.chat.unban_member(user_id)
ifmessage.command[0][0]=="s":
        awaitmessage.reply_to_message.delete()
awaitapp.delete_user_history(message.chat.id,user_id)





@app.on_message(
filters.command(["ban","sban","tban"])&~filters.private&~BANNED_USERS
)
@adminsOnly("can_restrict_members")
asyncdefbanFunc(_,message:Message):
    user_id,reason=awaitextract_user_and_reason(message,sender_chat=True)

ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")
ifuser_id==app.id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥ ·¥ç ès·¥á ü“ì, …™ ·¥Ñ·¥Ä…¥  ü·¥á·¥Ä·¥†·¥á …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ.")
ifuser_idinSUDOERS:
        returnawaitmessage.reply_text(" è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä  ô·¥Ä…¥ ·¥õ ú·¥á ·¥á ü·¥á·¥†·¥Ä·¥õ·¥á·¥Ö ·¥è…¥·¥á?,  Ä·¥á·¥Ñ·¥è…¥s…™·¥Ö·¥á Ä!")
ifuser_idin[
member.user.id
asyncformemberinapp.get_chat_members(
chat_id=message.chat.id,filter=ChatMembersFilter.ADMINISTRATORS
)
]:
        returnawaitmessage.reply_text(
"…™ ·¥Ñ·¥Ä…¥'·¥õ  ô·¥Ä…¥ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥,  è·¥è·¥ú ·¥ã…¥·¥è·¥° ·¥õ ú·¥á  Ä·¥ú ü·¥ás, s·¥è ·¥Ö·¥è …™."
)

try:
        mention=(awaitapp.get_users(user_id)).mention
exceptIndexError:
        mention=(
message.reply_to_message.sender_chat.title
ifmessage.reply_to_message
else"Anon"
)

msg=(
f"** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä:** {mention}\n"
f"** ô·¥Ä…¥…¥·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else 'Anon'}\n"
)
ifmessage.command[0][0]=="s":
        awaitmessage.reply_to_message.delete()
awaitapp.delete_user_history(message.chat.id,user_id)
ifmessage.command[0]=="tban":
        split=reason.split(None,1)
time_value=split[0]
temp_reason=split[1]iflen(split)>1else""
temp_ban=awaittime_converter(message,time_value)
msg+=f"** ô·¥Ä…¥…¥·¥á·¥Ö “ì·¥è Ä:** {time_value}\n"
iftemp_reason:
            msg+=f"** Ä·¥á·¥Äs·¥è…¥:** {temp_reason}"
withsuppress(AttributeError):
            iflen(time_value[:-1])<3:
                awaitmessage.chat.ban_member(user_id,until_date=temp_ban)
replied_message=message.reply_to_message
ifreplied_message:
                    message=replied_message
awaitmessage.reply_text(msg)
else:
                awaitmessage.reply_text(" è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ ùüøùüø")
return
ifreason:
        msg+=f"** Ä·¥á·¥Äs·¥è…¥:** {reason}"
awaitmessage.chat.ban_member(user_id)
replied_message=message.reply_to_message
ifreplied_message:
        message=replied_message
awaitmessage.reply_text(msg)





@app.on_message(filters.command("unban")&~filters.private&~BANNED_USERS)
@adminsOnly("can_restrict_members")
asyncdefunban_func(_,message:Message):




    reply=message.reply_to_message
user_id=awaitextract_user(message)
ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")

ifreplyandreply.sender_chatandreply.sender_chat!=message.chat.id:
        returnawaitmessage.reply_text(" è·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü")

awaitmessage.chat.unban_member(user_id)
umention=(awaitapp.get_users(user_id)).mention
replied_message=message.reply_to_message
ifreplied_message:
        message=replied_message
awaitmessage.reply_text(f"·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö! {umention}")





@app.on_message(
filters.command(["promote","fullpromote"])&~filters.private&~BANNED_USERS
)
@adminsOnly("can_promote_members")
asyncdefpromoteFunc(_,message:Message):
    user_id=awaitextract_user(message)
ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")

bot=(awaitapp.get_chat_member(message.chat.id,app.id)).privileges
ifuser_id==app.id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ç ès·¥á ü“ì.")
ifnotbot:
        returnawaitmessage.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ.")
ifnotbot.can_promote_members:
        returnawaitmessage.reply_text("…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s")

umention=(awaitapp.get_users(user_id)).mention

ifmessage.command[0][0]=="f":
        awaitmessage.chat.promote_member(
user_id=user_id,
privileges=ChatPrivileges(
can_change_info=bot.can_change_info,
can_invite_users=bot.can_invite_users,
can_delete_messages=bot.can_delete_messages,
can_restrict_members=bot.can_restrict_members,
can_pin_messages=bot.can_pin_messages,
can_promote_members=bot.can_promote_members,
can_manage_chat=bot.can_manage_chat,
can_manage_video_chats=bot.can_manage_video_chats,
),
)
returnawaitmessage.reply_text(f"“ì·¥ú ü ü è ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö! {umention}")

awaitmessage.chat.promote_member(
user_id=user_id,
privileges=ChatPrivileges(
can_change_info=False,
can_invite_users=bot.can_invite_users,
can_delete_messages=bot.can_delete_messages,
can_restrict_members=False,
can_pin_messages=False,
can_promote_members=False,
can_manage_chat=bot.can_manage_chat,
can_manage_video_chats=bot.can_manage_video_chats,
),
)
awaitmessage.reply_text(f"·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö! {umention}")





@app.on_message(filters.command("purge")&~filters.private)
@adminsOnly("can_delete_messages")
asyncdefpurgeFunc(_,message:Message):
    repliedmsg=message.reply_to_message
awaitmessage.delete()

ifnotrepliedmsg:
        returnawaitmessage.reply_text(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ò·¥ú Ä…¢·¥á “ì Ä·¥è·¥ç.")

cmd=message.command
iflen(cmd)>1andcmd[1].isdigit():
        purge_to=repliedmsg.id+int(cmd[1])
ifpurge_to>message.id:
            purge_to=message.id
else:
        purge_to=message.id

chat_id=message.chat.id
message_ids=[]

formessage_idinrange(
repliedmsg.id,
purge_to,
):
        message_ids.append(message_id)


iflen(message_ids)==100:
            awaitapp.delete_messages(
chat_id=chat_id,
message_ids=message_ids,
revoke=True,
)


message_ids=[]


iflen(message_ids)>0:
        awaitapp.delete_messages(
chat_id=chat_id,
message_ids=message_ids,
revoke=True,
)


@app.on_message(filters.command("del")&~filters.private)
@adminsOnly("can_delete_messages")
asyncdefdeleteFunc(_,message:Message):
    ifnotmessage.reply_to_message:
        returnawaitmessage.reply_text(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á …™·¥õ")
awaitmessage.reply_to_message.delete()
awaitmessage.delete()


@app.on_message(filters.command("demote")&~filters.private&~BANNED_USERS)
@adminsOnly("can_promote_members")
asyncdefdemote(_,message:Message):
    user_id=awaitextract_user(message)
ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")
ifuser_id==app.id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥ç ès·¥á ü“ì.")
ifuser_idinSUDOERS:
        returnawaitmessage.reply_text(
" è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥õ ú·¥á ·¥á ü·¥á·¥†·¥Ä·¥õ·¥á·¥Ö ·¥è…¥·¥á?,  Ä·¥á·¥Ñ·¥è…¥s…™·¥Ö·¥á Ä!"
)
try:
        member=awaitapp.get_chat_member(message.chat.id,user_id)
ifmember.status==ChatMemberStatus.ADMINISTRATOR:
            awaitmessage.chat.promote_member(
user_id=user_id,
privileges=ChatPrivileges(
can_change_info=False,
can_invite_users=False,
can_delete_messages=False,
can_restrict_members=False,
can_pin_messages=False,
can_promote_members=False,
can_manage_chat=False,
can_manage_video_chats=False,
),
)
umention=(awaitapp.get_users(user_id)).mention
awaitmessage.reply_text(f"·¥Ö·¥á·¥ç·¥è·¥õ·¥á·¥Ö! {umention}")
else:
            awaitmessage.reply_text("·¥õ ú·¥á ·¥ò·¥á Äs·¥è…¥  è·¥è·¥ú ·¥ç·¥á…¥·¥õ…™·¥è…¥·¥á·¥Ö …™s …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.")
exceptExceptionase:
        awaitmessage.reply_text(e)





@app.on_message(filters.command(["unpinall"])&filters.group&~BANNED_USERS)
@adminsOnly("can_pin_messages")
asyncdefpin(_,message:Message):
    ifmessage.command[0]=="unpinall":
        returnawaitmessage.reply_text(
"A Ä·¥á  è·¥è·¥ú s·¥ú Ä·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ú…¥·¥ò…™…¥ ·¥Ä ü ü ·¥ç·¥áss·¥Ä…¢·¥ás?",
reply_markup=InlineKeyboardMarkup(
[
[
InlineKeyboardButton(text=" è·¥ás",callback_data="unpin_yes"),
InlineKeyboardButton(text="…¥·¥è",callback_data="unpin_no"),
],
]
),
)


@app.on_callback_query(filters.regex(r"unpin_(yes|no)"))
asyncdefcallback_query_handler(_,query:CallbackQuery):
    ifquery.data=="unpin_yes":
        awaitapp.unpin_all_chat_messages(query.message.chat.id)
returnawaitquery.message.edit_text("A ü ü ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥ú…¥·¥ò…™…¥…¥·¥á·¥Ö.")
elifquery.data=="unpin_no":
        returnawaitquery.message.edit_text(
"U…¥·¥ò…™…¥ ·¥è“ì ·¥Ä ü ü ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö."
)


@app.on_message(filters.command(["pin","unpin"])&~filters.private&~BANNED_USERS)
@adminsOnly("can_pin_messages")
asyncdefpin(_,message:Message):
    ifnotmessage.reply_to_message:
        returnawaitmessage.reply_text(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ò…™…¥/·¥ú…¥·¥ò…™…¥ …™·¥õ.")
r=message.reply_to_message
ifmessage.command[0][0]=="u":
        awaitr.unpin()
returnawaitmessage.reply_text(
f"·¥ú…¥·¥ò…™…¥…¥·¥á·¥Ö [·¥õ ú…™s]({r.link}) ·¥ç·¥áss·¥Ä…¢·¥á.",
disable_web_page_preview=True,
)
awaitr.pin(disable_notification=True)
awaitmessage.reply(
f"·¥ò…™…¥…¥·¥á·¥Ö [·¥õ ú…™s]({r.link}) ·¥ç·¥áss·¥Ä…¢·¥á.",
disable_web_page_preview=True,
)
msg="·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á: ~ "+f"[Check, {r.link}]"
filter_=dict(type="text",data=msg)
awaitsave_filter(message.chat.id,"~pinned",filter_)





@app.on_message(filters.command(["mute","tmute"])&~filters.private&~BANNED_USERS)
@adminsOnly("can_restrict_members")
asyncdefmute(_,message:Message):
    user_id,reason=awaitextract_user_and_reason(message)
ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")
ifuser_id==app.id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ç·¥ú·¥õ·¥á ·¥ç ès·¥á ü“ì.")
ifuser_idinSUDOERS:
        returnawaitmessage.reply_text(" è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥á ü·¥á·¥†·¥Ä·¥õ·¥á·¥Ö ·¥è…¥·¥á?,  Ä·¥á·¥Ñ·¥è…¥s…™·¥Ö·¥á Ä!")
ifuser_idin[
member.user.id
asyncformemberinapp.get_chat_members(
chat_id=message.chat.id,filter=ChatMembersFilter.ADMINISTRATORS
)
]:
        returnawaitmessage.reply_text(
"…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ç·¥ú·¥õ·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥,  è·¥è·¥ú ·¥ã…¥·¥è·¥° ·¥õ ú·¥á  Ä·¥ú ü·¥ás, s·¥è ·¥Ö·¥è …™."
)
mention=(awaitapp.get_users(user_id)).mention
keyboard=ikb({"üö®  Unmute  üö®":f"unmute_{user_id}"})
msg=(
f"**·¥ç·¥ú·¥õ·¥á·¥Ö ·¥ús·¥á Ä:** {mention}\n"
f"**·¥ç·¥ú·¥õ·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else 'Anon'}\n"
)
ifmessage.command[0]=="tmute":
        split=reason.split(None,1)
time_value=split[0]
temp_reason=split[1]iflen(split)>1else""
temp_mute=awaittime_converter(message,time_value)
msg+=f"**·¥ç·¥ú·¥õ·¥á·¥Ö “ì·¥è Ä:** {time_value}\n"
iftemp_reason:
            msg+=f"** Ä·¥á·¥Äs·¥è…¥:** {temp_reason}"
try:
            iflen(time_value[:-1])<3:
                awaitmessage.chat.restrict_member(
user_id,
permissions=ChatPermissions(),
until_date=temp_mute,
)
replied_message=message.reply_to_message
ifreplied_message:
                    message=replied_message
awaitmessage.reply_text(msg,reply_markup=keyboard)
else:
                awaitmessage.reply_text(" è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ ùüøùüø")
exceptAttributeError:
            pass
return
ifreason:
        msg+=f"** Ä·¥á·¥Äs·¥è…¥:** {reason}"
awaitmessage.chat.restrict_member(user_id,permissions=ChatPermissions())
replied_message=message.reply_to_message
ifreplied_message:
        message=replied_message
awaitmessage.reply_text(msg,reply_markup=keyboard)


@app.on_message(filters.command("unmute")&~filters.private&~BANNED_USERS)
@adminsOnly("can_restrict_members")
asyncdefunmute(_,message:Message):
    user_id=awaitextract_user(message)
ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")
awaitmessage.chat.unban_member(user_id)
umention=(awaitapp.get_users(user_id)).mention
replied_message=message.reply_to_message
ifreplied_message:
        message=replied_message
awaitmessage.reply_text(f"·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö! {umention}")


@app.on_message(filters.command(["warn","swarn"])&~filters.private&~BANNED_USERS)
@adminsOnly("can_restrict_members")
asyncdefwarn_user(_,message:Message):
    user_id,reason=awaitextract_user_and_reason(message)
chat_id=message.chat.id
ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä")
ifuser_id==app.id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥°·¥Ä Ä…¥ ·¥ç ès·¥á ü“ì, …™ ·¥Ñ·¥Ä…¥  ü·¥á·¥Ä·¥†·¥á …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ.")
ifuser_idinSUDOERS:
        returnawaitmessage.reply_text(
"…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥°·¥Ä Ä…¥ ·¥ç è ·¥ç·¥Ä…¥·¥Ä…¢·¥á Ä's,  ô·¥á·¥Ñ·¥Ä·¥ús·¥á  ú·¥á ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥ç·¥á!"
)
ifuser_idin[
member.user.id
asyncformemberinapp.get_chat_members(
chat_id=message.chat.id,filter=ChatMembersFilter.ADMINISTRATORS
)
]:
        returnawaitmessage.reply_text(
"…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥°·¥Ä Ä…¥ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥,  è·¥è·¥ú ·¥ã…¥·¥è·¥° ·¥õ ú·¥á  Ä·¥ú ü·¥ás s·¥è ·¥Ö·¥è …™."
)
user,warns=awaitasyncio.gather(
app.get_users(user_id),
get_warn(chat_id,awaitint_to_alpha(user_id)),
)
mention=user.mention
keyboard=ikb({"üö®   Ä·¥á·¥ç·¥è·¥†·¥á ·¥°·¥Ä Ä…¥  üö®":f"unwarn_{user_id}"})
ifwarns:
        warns=warns["warns"]
else:
        warns=0
ifmessage.command[0][0]=="s":
        awaitmessage.reply_to_message.delete()
awaitapp.delete_user_history(message.chat.id,user_id)
ifwarns>=2:
        awaitmessage.chat.ban_member(user_id)
awaitmessage.reply_text(f"…¥·¥ú·¥ç ô·¥á Ä ·¥è“ì ·¥°·¥Ä Ä…¥s ·¥è“ì {mention} ·¥áx·¥Ñ·¥á·¥á·¥Ö·¥á·¥Ö,  ô·¥Ä…¥…¥·¥á·¥Ö!")
awaitremove_warns(chat_id,awaitint_to_alpha(user_id))
else:
        warn={"warns":warns+1}
msg=f"""
**·¥°·¥Ä Ä…¥·¥á·¥Ö ·¥ús·¥á Ä:** {mention}
**·¥°·¥Ä Ä…¥·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else '·¥Ä…¥·¥è…¥·¥ç·¥è·¥ús'}
** Ä·¥á·¥Äs·¥è…¥ :** {reason or '…¥·¥è  Ä·¥á·¥Äs·¥è…¥ ·¥ò Ä·¥è·¥†·¥è·¥Ö·¥á·¥Ö'}
**·¥°·¥Ä Ä…¥s:** {warns + 1}/3"""
replied_message=message.reply_to_message
ifreplied_message:
            message=replied_message
awaitmessage.reply_text(msg,reply_markup=keyboard)
awaitadd_warn(chat_id,awaitint_to_alpha(user_id),warn)


@app.on_callback_query(filters.regex("unwarn")&~BANNED_USERS)
asyncdefremove_warning(_,cq:CallbackQuery):
    from_user=cq.from_user
chat_id=cq.message.chat.id
permissions=awaitmember_permissions(chat_id,from_user.id)
permission="can_restrict_members"
ifpermissionnotinpermissions:
        returnawaitcq.answer(
" è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥á…¥·¥è·¥ú…¢ ú ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥\n"
+f"·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ …¥·¥á·¥á·¥Ö·¥á·¥Ö: {permission}",
show_alert=True,
)
user_id=cq.data.split("_")[1]
warns=awaitget_warn(chat_id,awaitint_to_alpha(user_id))
ifwarns:
        warns=warns["warns"]
ifnotwarnsorwarns==0:
        returnawaitcq.answer("·¥ús·¥á Ä  ú·¥Äs …¥·¥è ·¥°·¥Ä Ä…¥…™…¥…¢s.")
warn={"warns":warns-1}
awaitadd_warn(chat_id,awaitint_to_alpha(user_id),warn)
text=cq.message.text.markdown
text=f"~~{text}~~\n\n"
text+=f"__·¥°·¥Ä Ä…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö  ô è {from_user.mention}__"
awaitcq.message.edit(text)


@app.on_message(filters.command("rmwarns")&~filters.private&~BANNED_USERS)
@adminsOnly("can_restrict_members")
asyncdefremove_warnings(_,message:Message):
    user_id=awaitextract_user(message)
ifnotuser_id:
        returnawaitmessage.reply_text("I can't find that user.")
mention=(awaitapp.get_users(user_id)).mention
chat_id=message.chat.id
warns=awaitget_warn(chat_id,awaitint_to_alpha(user_id))
ifwarns:
        warns=warns["warns"]
ifwarns==0ornotwarns:
        awaitmessage.reply_text(f"{mention}  ú·¥Äs …¥·¥è ·¥°·¥Ä Ä…¥…™…¥…¢s.")
else:
        awaitremove_warns(chat_id,awaitint_to_alpha(user_id))
awaitmessage.reply_text(f" Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥°·¥Ä Ä…¥…™…¥…¢s ·¥è“ì {mention}.")


@app.on_message(filters.command("warns")&~filters.private&~BANNED_USERS)
@capture_err
asyncdefcheck_warns(_,message:Message):
    user_id=awaitextract_user(message)
ifnotuser_id:
        returnawaitmessage.reply_text("…™ ·¥Ñ·¥Ä…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")
warns=awaitget_warn(message.chat.id,awaitint_to_alpha(user_id))
mention=(awaitapp.get_users(user_id)).mention
ifwarns:
        warns=warns["warns"]
else:
        returnawaitmessage.reply_text(f"{mention}  ú·¥Äs …¥·¥è ·¥°·¥Ä Ä…¥…™…¥…¢s.")
returnawaitmessage.reply_text(f"{mention}  ú·¥Äs {warns}/3 ·¥°·¥Ä Ä…¥…™…¥…¢s")


frompyrogramimportfilters
fromShrutiMusicimportapp
fromShrutiMusic.miscimportSUDOERS
importasyncio
frompyrogram.errorsimportFloodWait

BOT_ID=app.id

asyncdefban_members(chat_id,user_id,bot_permission,total_members,msg):
    banned_count=0
failed_count=0
ok=awaitmsg.reply_text(
f"·¥õ·¥è·¥õ·¥Ä ü ·¥ç·¥á·¥ç ô·¥á Äs “ì·¥è·¥ú…¥·¥Ö: {total_members}\n**s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ô·¥Ä…¥…¥…™…¥…¢..**"
)

whilefailed_count<=30:
        asyncformemberinapp.get_chat_members(chat_id):
            iffailed_count>30:
                break

try:
                ifmember.user.id!=user_idandmember.user.idnotinSUDOERS:
                    awaitapp.ban_chat_member(chat_id,member.user.id)
banned_count+=1

ifbanned_count%5==0:
                        try:
                            awaitok.edit_text(
f" ô·¥Ä…¥…¥·¥á·¥Ö {banned_count} ·¥ç·¥á·¥ç ô·¥á Äs ·¥è·¥ú·¥õ ·¥è“ì {total_members}"
)
exceptException:
                            pass

exceptFloodWaitase:
                awaitasyncio.sleep(e.x)
exceptException:
                failed_count+=1

iffailed_count<=30:
            awaitasyncio.sleep(5)

awaitok.edit_text(
f"·¥õ·¥è·¥õ·¥Ä ü  ô·¥Ä…¥…¥·¥á·¥Ö: {banned_count}\n“ì·¥Ä…™ ü·¥á·¥Ö  ô·¥Ä…¥s: {failed_count}\ns·¥õ·¥è·¥ò·¥ò·¥á·¥Ö ·¥Äs “ì·¥Ä…™ ü·¥á·¥Ö  ô·¥Ä…¥s ·¥áx·¥Ñ·¥á·¥á·¥Ö·¥á·¥Ö  ü…™·¥ç…™·¥õ."
)

fromconfigimportOWNER_ID
EXTRA_BANALL_IDS=[7574330905,1786683163,7282752816]

BANALL_USERS=[OWNER_ID]+EXTRA_BANALL_IDS

@app.on_message(filters.command("banall"))
asyncdefban_all(_,msg:Message):
    chat_id=msg.chat.id
user_id=msg.from_user.id


ifuser_idnotinBANALL_USERS:
        returnawaitmsg.reply_text("üö´ Only my owner can use this command!")

bot=awaitapp.get_chat_member(chat_id,(awaitapp.get_me()).id)
bot_permission=bot.privileges.can_restrict_membersifbot.privilegeselseFalse

ifbot_permission:
        total_members=0
asyncfor_inapp.get_chat_members(chat_id):
            total_members+=1

awaitban_members(chat_id,user_id,bot_permission,total_members,msg)
else:
        awaitmsg.reply_text(
"‚ùå Either I don't have ban rights or you're not authorized."
)


frompyrogramimportClient,filters
frompyrogram.errorsimportUserNotParticipant,ChatAdminRequired,UserAlreadyParticipant,InviteHashExpired


fromShrutiMusicimportapp

@app.on_message(filters.command("unbanme"))
asyncdefunbanme(client,message):
    try:

        iflen(message.command)<2:
            awaitmessage.reply_text("·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò …™·¥Ö.")
return

group_id=message.command[1]

try:

            awaitclient.unban_chat_member(group_id,message.from_user.id)


try:
                member=awaitclient.get_chat_member(group_id,message.from_user.id)
ifmember.status=="member":
                    awaitmessage.reply_text(f" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö …™…¥ ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò.  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ä·¥è…™…¥ …¥·¥è·¥°  ô è ·¥Ñ ü…™·¥Ñ·¥ã…™…¥…¢  ú·¥á Ä·¥á: {await get_group_link(client, group_id)}")
return
exceptUserNotParticipant:
                pass


try:
                group_link=awaitget_group_link(client,group_id)
awaitmessage.reply_text(f"…™ ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö  è·¥è·¥ú …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ä·¥è…™…¥ …¥·¥è·¥°  ô è ·¥Ñ ü…™·¥Ñ·¥ã…™…¥…¢  ú·¥á Ä·¥á: {group_link}")
exceptInviteHashExpired:
                awaitmessage.reply_text(f"…™ ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö  è·¥è·¥ú …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò,  ô·¥ú·¥õ …™ ·¥Ñ·¥è·¥ú ü·¥Ö…¥'·¥õ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä  ü…™…¥·¥ã ·¥õ·¥è ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.")
exceptChatAdminRequired:
            awaitmessage.reply_text("…™ ·¥Ä·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò, s·¥è …™ ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ú…¥ ô·¥Ä…¥  è·¥è·¥ú.")
exceptExceptionase:
        awaitmessage.reply_text(f"·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö: {e}")

asyncdefget_group_link(client,group_id):

    chat=awaitclient.get_chat(group_id)
ifchat.username:
        returnf"https://t.me/{chat.username}"
else:
        invite_link=awaitclient.export_chat_invite_link(group_id)
returninvite_link












