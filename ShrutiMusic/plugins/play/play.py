utf-8utf-8





















importrandom
importstring

frompyrogramimportfilters
frompyrogram.typesimportInlineKeyboardMarkup,InputMediaPhoto,Message
frompytgcalls.exceptionsimportNoActiveGroupCall

importconfig
fromShrutiMusicimportApple,Resso,SoundCloud,Spotify,Telegram,YouTube,app
fromShrutiMusic.core.callimportNand
fromShrutiMusic.utilsimportseconds_to_min,time_to_seconds
fromShrutiMusic.utils.channelplayimportget_channeplayCB
fromShrutiMusic.utils.decorators.languageimportlanguageCB
fromShrutiMusic.utils.decorators.playimportPlayWrapper
fromShrutiMusic.utils.formattersimportformats
fromShrutiMusic.utils.inlineimport(
botplaylist_markup,
livestream_markup,
playlist_markup,
slider_markup,
track_markup,
)
fromShrutiMusic.utils.loggerimportplay_logs
fromShrutiMusic.utils.stream.streamimportstream
fromconfigimportBANNED_USERS,lyrical


@app.on_message(
filters.command(
[
"play",
"vplay",
"cplay",
"cvplay",
"playforce",
"vplayforce",
"cplayforce",
"cvplayforce",
]
)
&filters.group
&~BANNED_USERS
)
@PlayWrapper
asyncdefplay_commnd(
client,
message:Message,
_,
chat_id,
video,
channel,
playmode,
url,
fplay,
):
    mystic=awaitmessage.reply_text(
_["play_2"].format(channel)ifchannelelse_["play_1"]
)
plist_id=None
slider=None
plist_type=None
spotify=None
user_id=message.from_user.id
user_name=message.from_user.first_name
audio_telegram=(
(message.reply_to_message.audioormessage.reply_to_message.voice)
ifmessage.reply_to_message
elseNone
)
video_telegram=(
(message.reply_to_message.videoormessage.reply_to_message.document)
ifmessage.reply_to_message
elseNone
)
ifaudio_telegram:
        ifaudio_telegram.file_size>104857600:
            returnawaitmystic.edit_text(_["play_5"])
duration_min=seconds_to_min(audio_telegram.duration)
if(audio_telegram.duration)>config.DURATION_LIMIT:
            returnawaitmystic.edit_text(
_["play_6"].format(config.DURATION_LIMIT_MIN,app.mention)
)
file_path=awaitTelegram.get_filepath(audio=audio_telegram)
ifawaitTelegram.download(_,message,mystic,file_path):
            message_link=awaitTelegram.get_link(message)
file_name=awaitTelegram.get_filename(audio_telegram,audio=True)
dur=awaitTelegram.get_duration(audio_telegram,file_path)
details={
"title":file_name,
"link":message_link,
"path":file_path,
"dur":dur,
}

try:
                awaitstream(
_,
mystic,
user_id,
details,
chat_id,
user_name,
message.chat.id,
streamtype="telegram",
forceplay=fplay,
)
exceptExceptionase:
                print(f"Error: {e}")
ex_type=type(e).__name__
err=eifex_type=="AssistantErr"else_["general_2"].format(ex_type)
returnawaitmystic.edit_text(err)
returnawaitmystic.delete()
return
elifvideo_telegram:
        ifmessage.reply_to_message.document:
            try:
                ext=video_telegram.file_name.split(".")[-1]
ifext.lower()notinformats:
                    returnawaitmystic.edit_text(
_["play_7"].format(f"{' | '.join(formats)}")
)
except:
                returnawaitmystic.edit_text(
_["play_7"].format(f"{' | '.join(formats)}")
)
ifvideo_telegram.file_size>config.TG_VIDEO_FILESIZE_LIMIT:
            returnawaitmystic.edit_text(_["play_8"])
file_path=awaitTelegram.get_filepath(video=video_telegram)
ifawaitTelegram.download(_,message,mystic,file_path):
            message_link=awaitTelegram.get_link(message)
file_name=awaitTelegram.get_filename(video_telegram)
dur=awaitTelegram.get_duration(video_telegram,file_path)
details={
"title":file_name,
"link":message_link,
"path":file_path,
"dur":dur,
}
try:
                awaitstream(
_,
mystic,
user_id,
details,
chat_id,
user_name,
message.chat.id,
video=True,
streamtype="telegram",
forceplay=fplay,
)
exceptExceptionase:
                print(f"Error: {e}")
ex_type=type(e).__name__
err=eifex_type=="AssistantErr"else_["general_2"].format(ex_type)
returnawaitmystic.edit_text(err)
returnawaitmystic.delete()
return
elifurl:
        ifawaitYouTube.exists(url):
            if"playlist"inurl:
                try:
                    details=awaitYouTube.playlist(
url,
config.PLAYLIST_FETCH_LIMIT,
message.from_user.id,
)
except:
                    returnawaitmystic.edit_text(_["play_3"])
streamtype="playlist"
plist_type="yt"
if"&"inurl:
                    plist_id=(url.split("=")[1]).split("&")[0]
else:
                    plist_id=url.split("=")[1]
img=config.PLAYLIST_IMG_URL
cap=_["play_9"]
else:
                try:
                    details,track_id=awaitYouTube.track(url)
except:
                    returnawaitmystic.edit_text(_["play_3"])
streamtype="youtube"
img=details["thumb"]
cap=_["play_10"].format(
details["title"],
details["duration_min"],
)
elifawaitSpotify.valid(url):
            spotify=True
ifnotconfig.SPOTIFY_CLIENT_IDandnotconfig.SPOTIFY_CLIENT_SECRET:
                returnawaitmystic.edit_text(
"» sᴘᴏᴛɪғʏ ɪs ɴᴏᴛ sᴜᴘᴘᴏʀᴛᴇᴅ ʏᴇᴛ.\n\nᴘʟᴇᴀsᴇ ᴛʀʏ ᴀɢᴀɪɴ ʟᴀᴛᴇʀ."
)
if"track"inurl:
                try:
                    details,track_id=awaitSpotify.track(url)
except:
                    returnawaitmystic.edit_text(_["play_3"])
streamtype="youtube"
img=details["thumb"]
cap=_["play_10"].format(details["title"],details["duration_min"])
elif"playlist"inurl:
                try:
                    details,plist_id=awaitSpotify.playlist(url)
exceptException:
                    returnawaitmystic.edit_text(_["play_3"])
streamtype="playlist"
plist_type="spplay"
img=config.SPOTIFY_PLAYLIST_IMG_URL
cap=_["play_11"].format(app.mention,message.from_user.mention)
elif"album"inurl:
                try:
                    details,plist_id=awaitSpotify.album(url)
except:
                    returnawaitmystic.edit_text(_["play_3"])
streamtype="playlist"
plist_type="spalbum"
img=config.SPOTIFY_ALBUM_IMG_URL
cap=_["play_11"].format(app.mention,message.from_user.mention)
elif"artist"inurl:
                try:
                    details,plist_id=awaitSpotify.artist(url)
except:
                    returnawaitmystic.edit_text(_["play_3"])
streamtype="playlist"
plist_type="spartist"
img=config.SPOTIFY_ARTIST_IMG_URL
cap=_["play_11"].format(message.from_user.first_name)
else:
                returnawaitmystic.edit_text(_["play_15"])
elifawaitApple.valid(url):
            if"album"inurl:
                try:
                    details,track_id=awaitApple.track(url)
except:
                    returnawaitmystic.edit_text(_["play_3"])
streamtype="youtube"
img=details["thumb"]
cap=_["play_10"].format(details["title"],details["duration_min"])
elif"playlist"inurl:
                spotify=True
try:
                    details,plist_id=awaitApple.playlist(url)
except:
                    returnawaitmystic.edit_text(_["play_3"])
streamtype="playlist"
plist_type="apple"
cap=_["play_12"].format(app.mention,message.from_user.mention)
img=url
else:
                returnawaitmystic.edit_text(_["play_3"])
elifawaitResso.valid(url):
            try:
                details,track_id=awaitResso.track(url)
except:
                returnawaitmystic.edit_text(_["play_3"])
streamtype="youtube"
img=details["thumb"]
cap=_["play_10"].format(details["title"],details["duration_min"])
elifawaitSoundCloud.valid(url):
            try:
                details,track_path=awaitSoundCloud.download(url)
except:
                returnawaitmystic.edit_text(_["play_3"])
duration_sec=details["duration_sec"]
ifduration_sec>config.DURATION_LIMIT:
                returnawaitmystic.edit_text(
_["play_6"].format(
config.DURATION_LIMIT_MIN,
app.mention,
)
)
try:
                awaitstream(
_,
mystic,
user_id,
details,
chat_id,
user_name,
message.chat.id,
streamtype="soundcloud",
forceplay=fplay,
)
exceptExceptionase:
                print(f"Error: {e}")
ex_type=type(e).__name__
err=eifex_type=="AssistantErr"else_["general_2"].format(ex_type)
returnawaitmystic.edit_text(err)
returnawaitmystic.delete()
else:
            try:
                awaitNand.stream_call(url)
exceptNoActiveGroupCall:
                awaitmystic.edit_text(_["black_9"])
returnawaitapp.send_message(
chat_id=config.LOG_GROUP_ID,
text=_["play_17"],
)
exceptExceptionase:
                print(f"Error: {e}")
returnawaitmystic.edit_text(_["general_2"].format(type(e).__name__))
awaitmystic.edit_text(_["str_2"])
try:
                awaitstream(
_,
mystic,
message.from_user.id,
url,
chat_id,
message.from_user.first_name,
message.chat.id,
video=video,
streamtype="index",
forceplay=fplay,
)
exceptExceptionase:
                print(f"Error: {e}")
ex_type=type(e).__name__
err=eifex_type=="AssistantErr"else_["general_2"].format(ex_type)
returnawaitmystic.edit_text(err)
returnawaitplay_logs(message,streamtype="M3u8 or Index Link")
else:
        iflen(message.command)<2:
            buttons=botplaylist_markup(_)
returnawaitmystic.edit_text(
_["play_18"],
reply_markup=InlineKeyboardMarkup(buttons),
)
slider=True
query=message.text.split(None,1)[1]
if"-v"inquery:
            query=query.replace("-v","")
try:
            details,track_id=awaitYouTube.track(query)
except:
            returnawaitmystic.edit_text(_["play_3"])
streamtype="youtube"
ifstr(playmode)=="Direct":
        ifnotplist_type:
            ifdetails["duration_min"]:
                duration_sec=time_to_seconds(details["duration_min"])
ifduration_sec>config.DURATION_LIMIT:
                    returnawaitmystic.edit_text(
_["play_6"].format(config.DURATION_LIMIT_MIN,app.mention)
)
else:
                buttons=livestream_markup(
_,
track_id,
user_id,
"v"ifvideoelse"a",
"c"ifchannelelse"g",
"f"iffplayelse"d",
)
returnawaitmystic.edit_text(
_["play_13"],
reply_markup=InlineKeyboardMarkup(buttons),
)
try:
            awaitstream(
_,
mystic,
user_id,
details,
chat_id,
user_name,
message.chat.id,
video=video,
streamtype=streamtype,
spotify=spotify,
forceplay=fplay,
)
exceptExceptionase:
            print(f"Error: {e}")
ex_type=type(e).__name__
err=eifex_type=="AssistantErr"else_["general_2"].format(ex_type)
returnawaitmystic.edit_text(err)
awaitmystic.delete()
returnawaitplay_logs(message,streamtype=streamtype)
else:
        ifplist_type:
            ran_hash="".join(
random.choices(string.ascii_uppercase+string.digits,k=10)
)
lyrical[ran_hash]=plist_id
buttons=playlist_markup(
_,
ran_hash,
message.from_user.id,
plist_type,
"c"ifchannelelse"g",
"f"iffplayelse"d",
)
awaitmystic.delete()
awaitmessage.reply_photo(
photo=img,
caption=cap,
reply_markup=InlineKeyboardMarkup(buttons),
)
returnawaitplay_logs(message,streamtype=f"Playlist : {plist_type}")
else:
            ifslider:
                buttons=slider_markup(
_,
track_id,
message.from_user.id,
query,
0,
"c"ifchannelelse"g",
"f"iffplayelse"d",
)
awaitmystic.delete()
awaitmessage.reply_photo(
photo=details["thumb"],
caption=_["play_10"].format(
details["title"].title(),
details["duration_min"],
),
reply_markup=InlineKeyboardMarkup(buttons),
)
returnawaitplay_logs(message,streamtype=f"Searched on Youtube")
else:
                buttons=track_markup(
_,
track_id,
message.from_user.id,
"c"ifchannelelse"g",
"f"iffplayelse"d",
)
awaitmystic.delete()
awaitmessage.reply_photo(
photo=img,
caption=cap,
reply_markup=InlineKeyboardMarkup(buttons),
)
returnawaitplay_logs(message,streamtype=f"URL Searched Inline")


@app.on_callback_query(filters.regex("MusicStream")&~BANNED_USERS)
@languageCB
asyncdefplay_music(client,CallbackQuery,_):
    callback_data=CallbackQuery.data.strip()
callback_request=callback_data.split(None,1)[1]
vidid,user_id,mode,cplay,fplay=callback_request.split("|")
ifCallbackQuery.from_user.id!=int(user_id):
        try:
            returnawaitCallbackQuery.answer(_["playcb_1"],show_alert=True)
except:
            return
try:
        chat_id,channel=awaitget_channeplayCB(_,cplay,CallbackQuery)
except:
        return
user_name=CallbackQuery.from_user.first_name
try:
        awaitCallbackQuery.message.delete()
awaitCallbackQuery.answer()
except:
        pass
mystic=awaitCallbackQuery.message.reply_text(
_["play_2"].format(channel)ifchannelelse_["play_1"]
)
try:
        details,track_id=awaitYouTube.track(vidid,True)
except:
        returnawaitmystic.edit_text(_["play_3"])
ifdetails["duration_min"]:
        duration_sec=time_to_seconds(details["duration_min"])
ifduration_sec>config.DURATION_LIMIT:
            returnawaitmystic.edit_text(
_["play_6"].format(config.DURATION_LIMIT_MIN,app.mention)
)
else:
        buttons=livestream_markup(
_,
track_id,
CallbackQuery.from_user.id,
mode,
"c"ifcplay=="c"else"g",
"f"iffplayelse"d",
)
returnawaitmystic.edit_text(
_["play_13"],
reply_markup=InlineKeyboardMarkup(buttons),
)
video=Trueifmode=="v"elseNone
ffplay=Trueiffplay=="f"elseNone
try:
        awaitstream(
_,
mystic,
CallbackQuery.from_user.id,
details,
chat_id,
user_name,
CallbackQuery.message.chat.id,
video,
streamtype="youtube",
forceplay=ffplay,
)
exceptExceptionase:
        print(f"Error: {e}")
ex_type=type(e).__name__
err=eifex_type=="AssistantErr"else_["general_2"].format(ex_type)
returnawaitmystic.edit_text(err)
returnawaitmystic.delete()


@app.on_callback_query(filters.regex("AnonymousAdmin")&~BANNED_USERS)
asyncdefanonymous_check(client,CallbackQuery):
    try:
        awaitCallbackQuery.answer(
"» ʀᴇᴠᴇʀᴛ ʙᴀᴄᴋ ᴛᴏ ᴜsᴇʀ ᴀᴄᴄᴏᴜɴᴛ :\n\nᴏᴘᴇɴ ʏᴏᴜʀ ɢʀᴏᴜᴘ sᴇᴛᴛɪɴɢs.\n-> ᴀᴅᴍɪɴɪsᴛʀᴀᴛᴏʀs\n-> ᴄʟɪᴄᴋ ᴏɴ ʏᴏᴜʀ ɴᴀᴍᴇ\n-> ᴜɴᴄʜᴇᴄᴋ ᴀɴᴏɴʏᴍᴏᴜs ᴀᴅᴍɪɴ ᴘᴇʀᴍɪssɪᴏɴs.",
show_alert=True,
)
except:
        pass


@app.on_callback_query(filters.regex("NandPlaylists")&~BANNED_USERS)
@languageCB
asyncdefplay_playlists_command(client,CallbackQuery,_):
    callback_data=CallbackQuery.data.strip()
callback_request=callback_data.split(None,1)[1]
(
videoid,
user_id,
ptype,
mode,
cplay,
fplay,
)=callback_request.split("|")
ifCallbackQuery.from_user.id!=int(user_id):
        try:
            returnawaitCallbackQuery.answer(_["playcb_1"],show_alert=True)
except:
            return
try:
        chat_id,channel=awaitget_channeplayCB(_,cplay,CallbackQuery)
except:
        return
user_name=CallbackQuery.from_user.first_name
awaitCallbackQuery.message.delete()
try:
        awaitCallbackQuery.answer()
except:
        pass
mystic=awaitCallbackQuery.message.reply_text(
_["play_2"].format(channel)ifchannelelse_["play_1"]
)
videoid=lyrical.get(videoid)
video=Trueifmode=="v"elseNone
ffplay=Trueiffplay=="f"elseNone
spotify=True
ifptype=="yt":
        spotify=False
try:
            result=awaitYouTube.playlist(
videoid,
config.PLAYLIST_FETCH_LIMIT,
CallbackQuery.from_user.id,
True,
)
except:
            returnawaitmystic.edit_text(_["play_3"])
ifptype=="spplay":
        try:
            result,spotify_id=awaitSpotify.playlist(videoid)
except:
            returnawaitmystic.edit_text(_["play_3"])
ifptype=="spalbum":
        try:
            result,spotify_id=awaitSpotify.album(videoid)
except:
            returnawaitmystic.edit_text(_["play_3"])
ifptype=="spartist":
        try:
            result,spotify_id=awaitSpotify.artist(videoid)
except:
            returnawaitmystic.edit_text(_["play_3"])
ifptype=="apple":
        try:
            result,apple_id=awaitApple.playlist(videoid,True)
except:
            returnawaitmystic.edit_text(_["play_3"])
try:
        awaitstream(
_,
mystic,
user_id,
result,
chat_id,
user_name,
CallbackQuery.message.chat.id,
video,
streamtype="playlist",
spotify=spotify,
forceplay=ffplay,
)
exceptExceptionase:
        print(f"Error: {e}")
ex_type=type(e).__name__
err=eifex_type=="AssistantErr"else_["general_2"].format(ex_type)
returnawaitmystic.edit_text(err)
returnawaitmystic.delete()


@app.on_callback_query(filters.regex("slider")&~BANNED_USERS)
@languageCB
asyncdefslider_queries(client,CallbackQuery,_):
    callback_data=CallbackQuery.data.strip()
callback_request=callback_data.split(None,1)[1]
(
what,
rtype,
query,
user_id,
cplay,
fplay,
)=callback_request.split("|")
ifCallbackQuery.from_user.id!=int(user_id):
        try:
            returnawaitCallbackQuery.answer(_["playcb_1"],show_alert=True)
except:
            return
what=str(what)
rtype=int(rtype)
ifwhat=="F":
        ifrtype==9:
            query_type=0
else:
            query_type=int(rtype+1)
try:
            awaitCallbackQuery.answer(_["playcb_2"])
except:
            pass
title,duration_min,thumbnail,vidid=awaitYouTube.slider(query,query_type)
buttons=slider_markup(_,vidid,user_id,query,query_type,cplay,fplay)
med=InputMediaPhoto(
media=thumbnail,
caption=_["play_10"].format(
title.title(),
duration_min,
),
)
returnawaitCallbackQuery.edit_message_media(
media=med,reply_markup=InlineKeyboardMarkup(buttons)
)
ifwhat=="B":
        ifrtype==0:
            query_type=9
else:
            query_type=int(rtype-1)
try:
            awaitCallbackQuery.answer(_["playcb_2"])
except:
            pass
title,duration_min,thumbnail,vidid=awaitYouTube.slider(query,query_type)
buttons=slider_markup(_,vidid,user_id,query,query_type,cplay,fplay)
med=InputMediaPhoto(
media=thumbnail,
caption=_["play_10"].format(
title.title(),
duration_min,
),
)
returnawaitCallbackQuery.edit_message_media(
media=med,reply_markup=InlineKeyboardMarkup(buttons)
)












