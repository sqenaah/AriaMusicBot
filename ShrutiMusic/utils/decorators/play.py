importasyncio

frompyrogram.enumsimportChatMemberStatus
frompyrogram.errorsimport(
ChatAdminRequired,
InviteRequestSent,
UserAlreadyParticipant,
UserNotParticipant,
)
frompyrogram.typesimportInlineKeyboardButton,InlineKeyboardMarkup

fromShrutiMusicimportYouTube,app
fromShrutiMusic.miscimportSUDOERS
fromShrutiMusic.utils.databaseimport(
get_assistant,
get_cmode,
get_lang,
get_playmode,
get_playtype,
is_active_chat,
is_maintenance,
)
fromShrutiMusic.utils.inlineimportbotplaylist_markup
fromconfigimportPLAYLIST_IMG_URL,SUPPORT_GROUP,adminlist
fromstringsimportget_string

links={}


defPlayWrapper(command):
    asyncdefwrapper(client,message):
        language=awaitget_lang(message.chat.id)
_=get_string(language)
ifmessage.sender_chat:
            upl=InlineKeyboardMarkup(
[
[
InlineKeyboardButton(
text="ʜᴏᴡ ᴛᴏ ғɪx ?",
callback_data="AnonymousAdmin",
),
]
]
)
returnawaitmessage.reply_text(_["general_3"],reply_markup=upl)

ifawaitis_maintenance()isFalse:
            ifmessage.from_user.idnotinSUDOERS:
                returnawaitmessage.reply_text(
text=f"{app.mention} ɪs ᴜɴᴅᴇʀ ᴍᴀɪɴᴛᴇɴᴀɴᴄᴇ, ᴠɪsɪᴛ <a href={SUPPORT_GROUP}>sᴜᴘᴘᴏʀᴛ ᴄʜᴀᴛ</a> ғᴏʀ ᴋɴᴏᴡɪɴɢ ᴛʜᴇ ʀᴇᴀsᴏɴ.",
disable_web_page_preview=True,
)


try:
            awaitmessage.delete()
except:
            pass

audio_telegram=(
(message.reply_to_message.audioormessage.reply_to_message.voice)
ifmessage.reply_to_message
elseNone
)
video_telegram=(
(message.reply_to_message.videoormessage.reply_to_message.document)
ifmessage.reply_to_message
elseNone
)
url=awaitYouTube.url(message)
ifaudio_telegramisNoneandvideo_telegramisNoneandurlisNone:
            iflen(message.command)<2:
                if"stream"inmessage.command:
                    returnawaitmessage.reply_text(_["str_1"])
buttons=botplaylist_markup(_)
returnawaitmessage.reply_photo(
photo=PLAYLIST_IMG_URL,
caption=_["play_18"],
reply_markup=InlineKeyboardMarkup(buttons),
)
ifmessage.command[0][0]=="c":
            chat_id=awaitget_cmode(message.chat.id)
ifchat_idisNone:
                returnawaitmessage.reply_text(_["setting_7"])
try:
                chat=awaitapp.get_chat(chat_id)
except:
                returnawaitmessage.reply_text(_["cplay_4"])
channel=chat.title
else:
            chat_id=message.chat.id
channel=None
playmode=awaitget_playmode(message.chat.id)
playty=awaitget_playtype(message.chat.id)
ifplayty!="Everyone":
            ifmessage.from_user.idnotinSUDOERS:
                admins=adminlist.get(message.chat.id)
ifnotadmins:
                    returnawaitmessage.reply_text(_["admin_13"])
else:
                    ifmessage.from_user.idnotinadmins:
                        returnawaitmessage.reply_text(_["play_4"])
ifmessage.command[0][0]=="v":
            video=True
else:
            if"-v"inmessage.text:
                video=True
else:
                video=Trueifmessage.command[0][1]=="v"elseNone
ifmessage.command[0][-1]=="e":
            ifnotawaitis_active_chat(chat_id):
                returnawaitmessage.reply_text(_["play_16"])
fplay=True
else:
            fplay=None

ifnotawaitis_active_chat(chat_id):
            userbot=awaitget_assistant(chat_id)
try:
                try:
                    get=awaitapp.get_chat_member(chat_id,userbot.id)
exceptChatAdminRequired:
                    returnawaitmessage.reply_text(_["call_1"])
if(
get.status==ChatMemberStatus.BANNED
orget.status==ChatMemberStatus.RESTRICTED
):
                    returnawaitmessage.reply_text(
_["call_2"].format(
app.mention,userbot.id,userbot.name,userbot.username
)
)
exceptUserNotParticipant:
                ifchat_idinlinks:
                    invitelink=links[chat_id]
else:
                    ifmessage.chat.username:
                        invitelink=message.chat.username
try:
                            awaituserbot.resolve_peer(invitelink)
except:
                            pass
else:
                        try:
                            invitelink=awaitapp.export_chat_invite_link(chat_id)
exceptChatAdminRequired:
                            returnawaitmessage.reply_text(_["call_1"])
exceptExceptionase:
                            returnawaitmessage.reply_text(
_["call_3"].format(app.mention,type(e).__name__)
)

ifinvitelink.startswith("https://t.me/+"):
                    invitelink=invitelink.replace(
"https://t.me/+","https://t.me/joinchat/"
)
myu=awaitmessage.reply_text(_["call_4"].format(app.mention))
try:
                    awaitasyncio.sleep(1)
awaituserbot.join_chat(invitelink)
exceptInviteRequestSent:
                    try:
                        awaitapp.approve_chat_join_request(chat_id,userbot.id)
exceptExceptionase:
                        returnawaitmessage.reply_text(
_["call_3"].format(app.mention,type(e).__name__)
)
awaitasyncio.sleep(3)
awaitmyu.edit(_["call_5"].format(app.mention))
exceptUserAlreadyParticipant:
                    pass
exceptExceptionase:
                    returnawaitmessage.reply_text(
_["call_3"].format(app.mention,type(e).__name__)
)

links[chat_id]=invitelink

try:
                    awaituserbot.resolve_peer(chat_id)
except:
                    pass

returnawaitcommand(
client,
message,
_,
chat_id,
video,
channel,
playmode,
url,
fplay,
)

returnwrapper
