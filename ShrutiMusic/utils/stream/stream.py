importos
fromrandomimportrandint
fromtypingimportUnion

frompyrogram.typesimportInlineKeyboardMarkup

importconfig
fromShrutiMusicimportCarbon,YouTube,app
fromShrutiMusic.core.callimportNand
fromShrutiMusic.miscimportdb
fromShrutiMusic.utils.databaseimportadd_active_video_chat,is_active_chat
fromShrutiMusic.utils.exceptionsimportAssistantErr
fromShrutiMusic.utils.inlineimportaq_markup,close_markup,stream_markup
fromShrutiMusic.utils.pastebinimportNandBin
fromShrutiMusic.utils.stream.queueimportput_queue,put_queue_index
fromShrutiMusic.utils.thumbnailsimportgen_thumb


asyncdefstream(
_,
mystic,
user_id,
result,
chat_id,
user_name,
original_chat_id,
video:Union[bool,str]=None,
streamtype:Union[bool,str]=None,
spotify:Union[bool,str]=None,
forceplay:Union[bool,str]=None,
):
    ifnotresult:
        return
ifforceplay:
        awaitNand.force_stop_stream(chat_id)
ifstreamtype=="playlist":
        msg=f"{_['play_19']}\n\n"
count=0
forsearchinresult:
            ifint(count)==config.PLAYLIST_FETCH_LIMIT:
                continue
try:
                (
title,
duration_min,
duration_sec,
thumbnail,
vidid,
)=awaitYouTube.details(search,FalseifspotifyelseTrue)
except:
                continue
ifstr(duration_min)=="None":
                continue
ifduration_sec>config.DURATION_LIMIT:
                continue
ifawaitis_active_chat(chat_id):
                awaitput_queue(
chat_id,
original_chat_id,
f"vid_{vidid}",
title,
duration_min,
user_name,
vidid,
user_id,
"video"ifvideoelse"audio",
)
position=len(db.get(chat_id))-1
count+=1
msg+=f"{count}. {title[:70]}\n"
msg+=f"{_['play_20']} {position}\n\n"
else:
                ifnotforceplay:
                    db[chat_id]=[]
status=TrueifvideoelseNone
try:
                    file_path,direct=awaitYouTube.download(
vidid,mystic,video=status,videoid=True
)
except:
                    raiseAssistantErr(_["play_14"])
awaitNand.join_call(
chat_id,
original_chat_id,
file_path,
video=status,
image=thumbnail,
)
awaitput_queue(
chat_id,
original_chat_id,
file_pathifdirectelsef"vid_{vidid}",
title,
duration_min,
user_name,
vidid,
user_id,
"video"ifvideoelse"audio",
forceplay=forceplay,
)
img=awaitgen_thumb(vidid)
button=stream_markup(_,chat_id)
run=awaitapp.send_photo(
original_chat_id,
photo=img,
caption=_["stream_1"].format(
f"https://t.me/{app.username}?start=info_{vidid}",
title[:23],
duration_min,
user_name,
),
reply_markup=InlineKeyboardMarkup(button),
)
db[chat_id][0]["mystic"]=run
db[chat_id][0]["markup"]="stream"
ifcount==0:
            return
else:
            link=awaitNandBin(msg)
lines=msg.count("\n")
iflines>=17:
                car=os.linesep.join(msg.split(os.linesep)[:17])
else:
                car=msg
carbon=awaitCarbon.generate(car,randint(100,10000000))
upl=close_markup(_)
returnawaitapp.send_photo(
original_chat_id,
photo=carbon,
caption=_["play_21"].format(position,link),
reply_markup=upl,
)
elifstreamtype=="youtube":
        link=result["link"]
vidid=result["vidid"]
title=(result["title"]).title()
duration_min=result["duration_min"]
thumbnail=result["thumb"]
status=TrueifvideoelseNone

current_queue=db.get(chat_id)


ifcurrent_queueisnotNoneandlen(current_queue)>=10:
            returnawaitapp.send_message(original_chat_id,"You can't add more than 10 songs to the queue.")

try:
            file_path,direct=awaitYouTube.download(
vidid,mystic,videoid=True,video=status
)
except:
            raiseAssistantErr(_["play_14"])

ifawaitis_active_chat(chat_id):
            awaitput_queue(
chat_id,
original_chat_id,
file_pathifdirectelsef"vid_{vidid}",
title,
duration_min,
user_name,
vidid,
user_id,
"video"ifvideoelse"audio",
)
position=len(db.get(chat_id))-1
button=aq_markup(_,chat_id)
awaitapp.send_message(
chat_id=original_chat_id,
text=_["queue_4"].format(position,title[:27],duration_min,user_name),
reply_markup=InlineKeyboardMarkup(button),
)
else:
            ifnotforceplay:
                db[chat_id]=[]
awaitNand.join_call(
chat_id,
original_chat_id,
file_path,
video=status,
image=thumbnail,
)
awaitput_queue(
chat_id,
original_chat_id,
file_pathifdirectelsef"vid_{vidid}",
title,
duration_min,
user_name,
vidid,
user_id,
"video"ifvideoelse"audio",
forceplay=forceplay,
)
img=awaitgen_thumb(vidid)
button=stream_markup(_,chat_id)
run=awaitapp.send_photo(
original_chat_id,
photo=img,
caption=_["stream_1"].format(
f"https://t.me/{app.username}?start=info_{vidid}",
title[:23],
duration_min,
user_name,
),
reply_markup=InlineKeyboardMarkup(button),
)
db[chat_id][0]["mystic"]=run
db[chat_id][0]["markup"]="stream"
elifstreamtype=="soundcloud":
        file_path=result["filepath"]
title=result["title"]
duration_min=result["duration_min"]
ifawaitis_active_chat(chat_id):
            awaitput_queue(
chat_id,
original_chat_id,
file_path,
title,
duration_min,
user_name,
streamtype,
user_id,
"audio",
)
position=len(db.get(chat_id))-1
button=aq_markup(_,chat_id)
awaitapp.send_message(
chat_id=original_chat_id,
text=_["queue_4"].format(position,title[:27],duration_min,user_name),
reply_markup=InlineKeyboardMarkup(button),
)
else:
            ifnotforceplay:
                db[chat_id]=[]
awaitNand.join_call(chat_id,original_chat_id,file_path,video=None)
awaitput_queue(
chat_id,
original_chat_id,
file_path,
title,
duration_min,
user_name,
streamtype,
user_id,
"audio",
forceplay=forceplay,
)
button=stream_markup(_,chat_id)
run=awaitapp.send_photo(
original_chat_id,
photo=config.SOUNCLOUD_IMG_URL,
caption=_["stream_1"].format(
config.SUPPORT_GROUP,title[:23],duration_min,user_name
),
reply_markup=InlineKeyboardMarkup(button),
)
db[chat_id][0]["mystic"]=run
db[chat_id][0]["markup"]="tg"
elifstreamtype=="telegram":
        file_path=result["path"]
link=result["link"]
title=(result["title"]).title()
duration_min=result["dur"]
status=TrueifvideoelseNone
ifawaitis_active_chat(chat_id):
            awaitput_queue(
chat_id,
original_chat_id,
file_path,
title,
duration_min,
user_name,
streamtype,
user_id,
"video"ifvideoelse"audio",
)
position=len(db.get(chat_id))-1
button=aq_markup(_,chat_id)
awaitapp.send_message(
chat_id=original_chat_id,
text=_["queue_4"].format(position,title[:27],duration_min,user_name),
reply_markup=InlineKeyboardMarkup(button),
)
else:
            ifnotforceplay:
                db[chat_id]=[]
awaitNand.join_call(chat_id,original_chat_id,file_path,video=status)
awaitput_queue(
chat_id,
original_chat_id,
file_path,
title,
duration_min,
user_name,
streamtype,
user_id,
"video"ifvideoelse"audio",
forceplay=forceplay,
)
ifvideo:
                awaitadd_active_video_chat(chat_id)
button=stream_markup(_,chat_id)
run=awaitapp.send_photo(
original_chat_id,
photo=config.TELEGRAM_VIDEO_URLifvideoelseconfig.TELEGRAM_AUDIO_URL,
caption=_["stream_1"].format(link,title[:23],duration_min,user_name),
reply_markup=InlineKeyboardMarkup(button),
)
db[chat_id][0]["mystic"]=run
db[chat_id][0]["markup"]="tg"
elifstreamtype=="live":
        link=result["link"]
vidid=result["vidid"]
title=(result["title"]).title()
thumbnail=result["thumb"]
duration_min="Live Track"
status=TrueifvideoelseNone
ifawaitis_active_chat(chat_id):
            awaitput_queue(
chat_id,
original_chat_id,
f"live_{vidid}",
title,
duration_min,
user_name,
vidid,
user_id,
"video"ifvideoelse"audio",
)
position=len(db.get(chat_id))-1
button=aq_markup(_,chat_id)
awaitapp.send_message(
chat_id=original_chat_id,
text=_["queue_4"].format(position,title[:27],duration_min,user_name),
reply_markup=InlineKeyboardMarkup(button),
)
else:
            ifnotforceplay:
                db[chat_id]=[]
n,file_path=awaitYouTube.video(link)
ifn==0:
                raiseAssistantErr(_["str_3"])
awaitNand.join_call(
chat_id,
original_chat_id,
file_path,
video=status,
image=thumbnailifthumbnailelseNone,
)
awaitput_queue(
chat_id,
original_chat_id,
f"live_{vidid}",
title,
duration_min,
user_name,
vidid,
user_id,
"video"ifvideoelse"audio",
forceplay=forceplay,
)
img=awaitgen_thumb(vidid)
button=stream_markup(_,chat_id)
run=awaitapp.send_photo(
original_chat_id,
photo=img,
caption=_["stream_1"].format(
f"https://t.me/{app.username}?start=info_{vidid}",
title[:23],
duration_min,
user_name,
),
reply_markup=InlineKeyboardMarkup(button),
)
db[chat_id][0]["mystic"]=run
db[chat_id][0]["markup"]="tg"
elifstreamtype=="index":
        link=result
title="ɪɴᴅᴇx ᴏʀ ᴍ3ᴜ8 ʟɪɴᴋ"
duration_min="00:00"
ifawaitis_active_chat(chat_id):
            awaitput_queue_index(
chat_id,
original_chat_id,
"index_url",
title,
duration_min,
user_name,
link,
"video"ifvideoelse"audio",
)
position=len(db.get(chat_id))-1
button=aq_markup(_,chat_id)
awaitmystic.edit_text(
text=_["queue_4"].format(position,title[:27],duration_min,user_name),
reply_markup=InlineKeyboardMarkup(button),
)
else:
            ifnotforceplay:
                db[chat_id]=[]
awaitNand.join_call(
chat_id,
original_chat_id,
link,
video=TrueifvideoelseNone,
)
awaitput_queue_index(
chat_id,
original_chat_id,
"index_url",
title,
duration_min,
user_name,
link,
"video"ifvideoelse"audio",
forceplay=forceplay,
)
button=stream_markup(_,chat_id)
run=awaitapp.send_photo(
original_chat_id,
photo=config.STREAM_IMG_URL,
caption=_["stream_2"].format(user_name),
reply_markup=InlineKeyboardMarkup(button),
)
db[chat_id][0]["mystic"]=run
db[chat_id][0]["markup"]="tg"
awaitmystic.delete()
